syntax = "proto3";

package koinos.rpc.lp_tracker;
option go_package = "github.com/koinos/koinos-proto-golang/v2/koinos/rpc/lp_tracker";

import "koinos/lp_tracker/lp_tracker.proto";
import "koinos/options.proto";
import "koinos/rpc/rpc.proto";

message pool_pair {
   bytes pool = 1 [(btype) = ADDRESS];
   string token_a = 2;
   string token_b = 3;
}

message get_pools_request {
   string start = 1;
   uint64 limit = 2 [jstype = JS_STRING];
}

message get_pools_response {
   repeated pool_pair values = 1;
}

message account_liquidity {
   bytes address = 1 [(btype) = ADDRESS];
   uint64 balance = 2;
   uint64 coin_ms_hi = 3;
   uint64 coin_ms_lo = 4;
}

message get_liquidity_request {
   bytes pool = 1 [(btype) = ADDRESS];
   bytes start = 2 [(btype) = ADDRESS];
   uint64 limit = 3 [jstype = JS_STRING];
   optional uint64 start_ms = 4;
   optional uint64 end_ms = 5;
}

message get_liquidity_response {
   repeated account_liquidity values = 1;
}

message pool_tvl {
   bytes pool = 1 [(btype) = ADDRESS];
   uint64 tvl = 2;
}

message get_tvl_request {
   bytes start = 1 [(btype) = ADDRESS];
   uint64 limit = 2 [jstype = JS_STRING];
   optional uint64 ms = 3;
}

message get_tvl_response {
   repeated pool_tvl values = 1;
}

message lp_tracker_request {
   oneof request {
      rpc.reserved_rpc reserved = 1;
      get_pools_request get_pools = 2;
      get_liquidity_request get_liquidity = 3;
      get_tvl_request get_tvl = 4;
   }
}

message lp_tracker_response {
   oneof response {
      rpc.reserved_rpc reserved = 1;
      rpc.error_status error = 2;
      get_pools_response get_pools = 3;
      get_liquidity_response get_liquidity = 4;
      get_tvl_response get_tvl = 5;
   }
}
