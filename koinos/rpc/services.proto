syntax = "proto3";

package koinos.services;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "openapiv3/annotations.proto";

import "koinos/rpc/account_history/account_history_rpc.proto";
import "koinos/rpc/block_store/block_store_rpc.proto";
import "koinos/rpc/chain/chain_rpc.proto";
import "koinos/rpc/contract_meta_store/contract_meta_store_rpc.proto";
import "koinos/rpc/mempool/mempool_rpc.proto";
import "koinos/rpc/p2p/p2p_rpc.proto";
import "koinos/rpc/transaction_store/transaction_store_rpc.proto";

option go_package = "github.com/koinos/koinos-proto-golang/koinos/services";

option (openapi.v3.document) = {
  info: {
    title: "Koinos API";
    version: "v1.0.0";
    description: "Provides the API to interact with a Koinos cluster";
    contact: {
      name: "Koinos Group, Inc.";
      url: "https://github.com/koinos/koinos-proto";
      email: "contact@koinos.group";
    }
    license: {
      name: "MIT";
      url: "https://github.com/koinos/koinos-proto/blob/master/LICENSE.md";
    }
  }
  components: {
    security_schemes: {
      additional_properties: [
        {
          name: "BasicAuth";
          value: {
            security_scheme: {
              type: "http";
              scheme: "basic";
            }
          }
        }
      ]
    }
  }
};

service account_history {
  rpc get_account_history(.koinos.rpc.account_history.get_account_history_request) returns (.koinos.rpc.account_history.get_account_history_response) {
    option (google.api.http) = {
      get: "/v1/account_history"
      body: "get_account_history_request"
    };
    option (google.api.method_signature) = "get_account_history_request";
  }
}

service block_store {
  rpc get_blocks_by_id(.koinos.rpc.block_store.get_blocks_by_id_request) returns (.koinos.rpc.block_store.get_blocks_by_id_response) {
    option (google.api.http) = {
      get: "/v1/blocks_by_id"
      body: "get_blocks_by_id_request"
    };
    option (google.api.method_signature) = "get_blocks_by_id_request";
  }
  rpc get_blocks_by_height(.koinos.rpc.block_store.get_blocks_by_height_request) returns (.koinos.rpc.block_store.get_blocks_by_height_response) {
    option (google.api.http) = {
      get: "/v1/blocks_by_height"
      body: "get_blocks_by_height_request"
    };
    option (google.api.method_signature) = "get_blocks_by_height_request";
  }
  rpc get_highest_block(.koinos.rpc.block_store.get_highest_block_request) returns (.koinos.rpc.block_store.get_highest_block_response) {
    option (google.api.http) = {
      get: "/v1/highest_block"
      body: "get_highest_block_request"
    };
    option (google.api.method_signature) = "get_highest_block_request";
  }
}

service chain {
  rpc submit_block(.koinos.rpc.chain.submit_block_request) returns (.koinos.rpc.chain.submit_block_response) {
    option (google.api.http) = {
      put: "/v1/block"
      body: "submit_block_request"
    };
    option (google.api.method_signature) = "submit_block_request";
  }
  rpc submit_transaction(.koinos.rpc.chain.submit_transaction_request) returns (.koinos.rpc.chain.submit_transaction_response) {
    option (google.api.http) = {
      put: "/v1/transaction"
      body: "submit_transaction_request"
    };
    option (google.api.method_signature) = "submit_transaction_request";
  }
  rpc get_head_info(.koinos.rpc.chain.get_head_info_request) returns (.koinos.rpc.chain.get_head_info_response) {
    option (google.api.http) = {
      get: "/v1/head_info"
      body: "get_head_info_request"
    };
    option (google.api.method_signature) = "get_head_info_request";
  }
  rpc get_chain_id(.koinos.rpc.chain.get_chain_id_request) returns (.koinos.rpc.chain.get_chain_id_response) {
    option (google.api.http) = {
      get: "/v1/chain_id"
      body: "get_chain_id_request"
    };
    option (google.api.method_signature) = "get_chain_id_request";
  }
  rpc get_fork_heads(.koinos.rpc.chain.get_fork_heads_request) returns (.koinos.rpc.chain.get_fork_heads_response) {
    option (google.api.http) = {
      get: "/v1/fork_heads"
      body: "get_fork_heads_request"
    };
    option (google.api.method_signature) = "get_fork_heads_request";
  }
  rpc read_contract(.koinos.rpc.chain.read_contract_request) returns (.koinos.rpc.chain.read_contract_response) {
    option (google.api.http) = {
      get: "/v1/read_contract"
      body: "read_contract_request"
    };
    option (google.api.method_signature) = "read_contract_request";
  }
  rpc get_account_nonce(.koinos.rpc.chain.get_account_nonce_request) returns (.koinos.rpc.chain.get_account_nonce_response) {
    option (google.api.http) = {
      get: "/v1/account_nonce"
      body: "get_account_nonce_request"
    };
    option (google.api.method_signature) = "get_account_nonce_request";
  }
  rpc get_account_rc(.koinos.rpc.chain.get_account_rc_request) returns (.koinos.rpc.chain.get_account_rc_response) {
    option (google.api.http) = {
      get: "/v1/account_rc"
      body: "get_account_rc_request"
    };
    option (google.api.method_signature) = "get_account_rc_request";
  }
  rpc get_resource_limits(.koinos.rpc.chain.get_resource_limits_request) returns (.koinos.rpc.chain.get_resource_limits_response) {
    option (google.api.http) = {
      get: "/v1/resource_limits"
      body: "get_resource_limits_request"
    };
    option (google.api.method_signature) = "get_resource_limits_request";
  }
}

service contract_meta_store {
  rpc get_contract_meta(.koinos.rpc.contract_meta_store.get_contract_meta_request) returns (.koinos.rpc.contract_meta_store.get_contract_meta_response) {
    option (google.api.http) = {
      get: "/v1/contract_meta"
      body: "get_contract_meta_request"
    };
    option (google.api.method_signature) = "get_contract_meta_request";
  }
}

service mempool {
  rpc get_pending_transactions(.koinos.rpc.mempool.get_pending_transactions_request) returns (.koinos.rpc.mempool.get_pending_transactions_response) {
    option (google.api.http) = {
      get: "/v1/pending_transactions"
      body: "get_pending_transactions_request"
    };
    option (google.api.method_signature) = "get_pending_transactions_request";
  }
  rpc check_pending_account_resources(.koinos.rpc.mempool.check_pending_account_resources_request) returns (.koinos.rpc.mempool.check_pending_account_resources_response) {
    option (google.api.http) = {
      get: "/v1/pending_account_resources"
        body: "check_pending_account_resources_request"
      };
    option (google.api.method_signature) = "check_pending_account_resources_request";
  }
}

service p2p {
  rpc get_gossip_status(.koinos.rpc.p2p.get_gossip_status_request) returns (.koinos.rpc.p2p.get_gossip_status_response) {
    option (google.api.http) = {
      get: "/v1/gossip_status"
      body: "get_gossip_status_request"
    };
    option (google.api.method_signature) = "get_gossip_status_request";
  }
}

service transaction_store {
  rpc get_transactions_by_id(.koinos.rpc.transaction_store.get_transactions_by_id_request) returns (.koinos.rpc.transaction_store.get_transactions_by_id_response) {
    option (google.api.http) = {
      get: "/v1/transactions_by_id"
      body: "get_transactions_by_id_request"
    };
    option (google.api.method_signature) = "get_transactions_by_id_request";
  }
}
